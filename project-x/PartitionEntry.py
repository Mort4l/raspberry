#!/usr/bin/python
# coding=utf-8

import os
from xml.etree.ElementTree import ElementTree, Element, SubElement, Comment, tostring
from xml.dom import minidom
import DayInterval
import datetime


class PartitionEntry(object):

    windowOpenTimeInSeconds = 0
    windowOpenCount = 0
    windowCloseCount = 0

    xmlFile = None

    fileName = ""

    def __str__(self):
        msg = ""
        msg += "windowOpenTimeInSeconds =  %i\n" % self.windowOpenTimeInSeconds
        msg += "windowOpenCount = %i\n" % self.windowOpenCount
        msg += "windowCloseCount = %i\n" % self.windowCloseCount
        return msg

    def setFileName(self, fileName):
        self.fileName = "./db/%s.xml" % fileName

    def __init__(self, fileName):
        #self.fileName = "./db/2017-01-07.xml"
        self.setFileName(fileName)
        self.loadFromFile()

    """
    """
    def loadFromFile(self, partition = 0):

        self.xmlFile = ElementTree(file=self.fileName)
        xpath = './entries/partition[@number="%s"]' % partition
        for e in self.xmlFile.findall(xpath):
            self.windowOpenTimeInSeconds    = e.find("windowOpenTime").text
            self.windowOpenCount            = e.find("windowOpenCount").text
            self.windowCloseCount           = e.find("windowCloseCount").text

    """
    """
    def updatePartition(self, partition = 0):
        xpath = './entries/partition[@number="%s"]' % partition

        for e in self.xmlFile.findall(xpath):
            e.find("windowOpenTime").text = self.windowOpenTimeInSeconds
            e.find("windowOpenCount").text = self.windowOpenCount
            e.find("windowCloseCount").text = self.windowCloseCount


    """
    Speichert aktuelle Repr√§sentation der Instanz in xmlFile auf die Platte
    """
    def saveToFile(self):
        if self.fileName == None or self.fileName == "": return
        self.xmlFile.write(self.fileName)

    """
        Erstellt neues PartitionEntryObject und schreibt es auf die Platte
    """
    def createPartitionEntry(self):

        root = Element('root')

        comment = Comment('Generated by PartitionEntry.createPartitionEntry')
        root.append(comment)

        date = SubElement(root, 'date')
        date.text = 'hier das datum des tages'

        entries = SubElement(root, 'entries')

        for i in range(DayInterval.DayInterval.NUMBER_PARTITIONS):
            partition = SubElement(entries, 'partition')
            partition.set("number", str(i))

            wot = SubElement(partition, 'windowOpenTime')
            woc = SubElement(partition, 'windowOpenCount')
            wcc = SubElement(partition, 'windowCloseCount')

            wot.text = "0"
            woc.text = "0"
            wcc.text = "0"

        rough_string = tostring(root, 'utf-8')
        rootNode = minidom.parseString(rough_string)

        # FileName setzen
        self.setFileName(datetime.date.today())
        file_handle = open(self.fileName, "wb")
        rootNode.writexml(file_handle, addindent="\t", newl='\n')
        file_handle.close()


if __name__ == "__main__":
    p = PartitionEntry("2017-01-07")
    #p.loadFromFile()
    #p.windowOpenCount = "jjj"
    #p.updatePartition()
    #p.saveToFile()
    p.createPartitionEntry()

